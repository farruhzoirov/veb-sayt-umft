openapi: 3.1.0
info:
  title: NEW UMFT SITE  ADMIN PANEL API
  description: GREAT PROJECT
  version: 1.0.0
servers:
  - url: http://95.130.227.52:4131
    description: Production server
  - url: http://localhost:4131
    description: Local development server
tags:
  - name: Auth
    description: Endpoints related to authentication

paths:


  ## Auth
  /auth/add-first-admin:
    get:
      summary: Creating or updating admin.
      description: Optional extended description in CommonMark or HTML.
      responses:
        "200": # status code
          description: Adding admin
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Auth
  /auth/login:
    post:
      summary: login.
      description: Optional extended description in CommonMark or HTML.
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/login"
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginSuccess"
      tags:
        - Auth
  /auth/check-user:
    get:
      summary: checking user exist or don't.
      security:
        - BearerAuth: [ ]
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
      tags:
        - Auth

  ## User
  /user/get-all:
    get:
      summary: All users.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                # $ref: "#/components/schemas/topsearch"
      tags:
        - Users

  /user/add-user:
    post:
      summary: Creating one user (it may be manager or admin ...).
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "201": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addUserResponse"
      tags:
        - Users
  /user/{userId}:
    put:
      summary: Update one user
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: userId
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "201": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateUserResponse"

      tags:
        - Users
    get:
      summary: Getting one user by id.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
      tags:
        - Users

    delete:
      summary: Deleting one user by id.
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteUserResponse"

      tags:
        - Users

  ## Applicants
  /submit/applicants:
    get:
      summary: All applicants.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      responses:
        "200":
          description: A JSON array of applicants names
          content:
            application/json:
              schema:
                type: object
      tags:
        - Applicants

    post:
      summary: Creating one applicant.
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicants"
      responses:
        "201":
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addUserResponse"
      tags:
        - Applicants

  /submit/applicants/{id}:
    get:
      summary: Getting one applicant by id.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The applicant ID
      responses:
        "200":
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
      tags:
        - Applicants

  ##Language
  /api/language:
    get:
      summary: All languages
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: title
          schema:
            type: string
          required: false
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/languageGet"
      tags:
        - Language
    post:
      summary: Creating language.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/language"
      responses:
        "201": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Language

  /api/language/{id}:
    get:
      summary: Getting one language.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/language"
      tags:
        - Language
    put:
      summary: Update one language.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/languageUp"
      responses:
        "201": # status code
          description: updating one language
          content:
            application/json:
              schema:
                type: object
              #   items:
              #     $ref: '#/components/schemas/country'
      tags:
        - Language

    delete:
      summary: Deleting one language.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: Deleting one language
          content:
            application/json:
              schema:
                type: object
              #   items:
              #     $ref: '#/components/schemas/country'
      tags:
        - Language

  /api/language/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Language

  /api/language/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deletingFileResponse"

      tags:
        - Language

  ## Category
  /api/category:
    get:
      summary: All categories.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false

        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200": # status code
          description: All categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categoriesGet"
      tags:
        - Category
    post:
      summary: Creating one category.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Birinchi model qo´shganda bodyda modelId kelmaydi translatelari uchun esa bo'lishi kerak.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/category"
      responses:
        "201": # status code
          description: Creating one category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Category
  /api/category/{id}:
    put:
      summary: Updating one category
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the category to be updated
      requestBody:
        description: to update category
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/categoryUp"
      responses:
        "201": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Category
    get:
      summary: Getting one category by id.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/category"
      tags:
        - Category

    delete:
      summary: Deleting category.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: Deleting category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Category
    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the category to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Category

  /api/category/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Category

  /api/category/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Category
  /api/category/check/{slug}:
    get:
      summary: check slug exists or don't.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: Object
          content:
            application/json:
              schema:
                type: object
                items:
                  isSlugExists:
                    type: Number
      tags:
        - Category

  ## News
  /api/news:
    get:
      summary: All news.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: school
          schema:
            type: string
          required: false
        - in: query
          name: title
          schema:
            type: string
          required: false
      responses:
        "200": # status code
          description: All news
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/newsGet"
      tags:
        - News
    post:
      summary: Creating news.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/news"
      responses:
        "201": # status code
          description: Creating news
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - News

  /api/news/{id}:
    get:
      summary: Getting one news.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
        - in: path
          name: language
          schema:
            type: string
      responses:
        "200": # status code
          description: Getting one news
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/category"
      tags:
        - News

    put:
      summary: Updating news.
      security:
        - BearerAuth: [ ]
          parameters:
            - in: path
              name: id
              schema:
                type: string
              required: true

      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/news"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - News
    delete:
      summary: Deleting news.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - News
    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the news to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - News

  /api/news/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - News

  /api/news/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - News

  ## Page
  /api/page:
    get:
      summary: All pages.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: school
          schema:
            type: string
          required: false
        - in: query
          name: title
          schema:
            type: string
          required: false
      responses:
        "200": # status code
          description: All pages
          content:
            application/json:
              schema:
                type: object
                items:
                # $ref: "#/components/schemas/topsearch"
      tags:
        - Page
    post:
      summary: Creating one page.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/page"
      responses:
        "201": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Page
    put:
      summary: Updating pages.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pageUp"
      responses:
        "201": # status code
          description: Updating page
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Page
  /page/all:
    get:
      summary: barcha pageni til bo'yicha front uchun.
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: language
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                # $ref: "#/components/schemas/topsearch"
      tags:
        - Page
  /page/{slug}:
    get:
      summary: bitta pageni olish front uchun.

      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
        - in: query
          name: language
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/page"
      tags:
        - Page
  /api/page/{id}:
    get:
      summary: Getting one page.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: path
          name: language
          schema:
            type: string
      responses:
        "200": # status code
          description: Getting one page
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/category"
      tags:
        - Page
    delete:
      summary: Deleting page by id
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200": # status code
          description: Deleting page by id
          content:
            application/json:
              schema:
                type: object
              #   items:
              #     $ref: '#/components/schemas/country'
      tags:
        - Page

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the page to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Page

  /api/page/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Page

  /api/page/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Page
  ##Degree
  /api/degree:
    get:
      summary: Get all degrees
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
          type: string
          required: false
      responses:
        "200":
          description: List of degrees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/degreeGet"
      tags:
        - Degree

    post:
      summary: Create a degree
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Degree creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/degree"
      responses:
        "201":
          description: Degree created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Degree

  /api/degree/{id}:
    get:
      summary: Get a single degree by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single degree
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/degree"
      tags:
        - Degree

    put:
      summary: Update a degree by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Degree update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/degreePut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Degree

    delete:
      summary: Delete a degree by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Degree delete payload
        required: false
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Degree

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the degree to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Degree

  /api/degree/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Degree

  /api/degree/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Degree

  ##Specialty

  /specialty/fetch-specialty:
    get:
      summary: Fetch or sync all specialties
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: For sync specialties
      tags:
        - Specialty

  /api/specialty:
    get:
      summary: Get all specialties
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
            required: false
      responses:
        "200":
          description: List of specialties
          content:
            application/json:
              schema:
                type: object
              #   items:
              #     $ref: "#/components/schemas/directionAll"
      tags:
        - Specialty

    post:
      summary: Add a specialties translate.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Specialty creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/specialtyPost"
      responses:
        "201":
          description: Specialty created successfully
          content:
            application/json:
            # schema:
            #   $ref: "#/components/schemas/addModel"
      tags:
        - Specialty

  /api/specialty/{id}:
    get:
      summary: Get a single Specialty by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single Specialty
          content:
            application/json:
            # schema:
            #   $ref: "#/components/schemas/directionAll"
      tags:
        - Specialty
    put:
      summary: Update a Specialty by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Specialty update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/specialtyPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
              type:
                object
              # $ref: "#/components/schemas/updateModel"
      tags:
        - Specialty

    delete:
      summary: Delete a Specialty by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Specialty

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the specialties to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "200": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Specialty

  /api/specialty/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Specialty

  /api/specialty/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Specialty

  ##Department
  /department/fetch-departments:
    get:
      summary: Sync all departments from hemis api.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of faculties
          content:
            application/json:
              schema:
      #                $ref: "#/components/schemas/faculty"
      tags:
        - Department

  /api/department:
    get:
      summary: Get all departments
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of faculties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/department"
      tags:
        - Department

    post:
      summary: Add a department translates.
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Faculty creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/departmentPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Department

  /api/department/{id}:
    get:
      summary: Get a single department by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single department
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/faculty"
      tags:
        - Department
    put:
      summary: Update a department by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: Department update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/departmentPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Department

    delete:
      summary: Delete a department by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true

      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Department

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the department to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Department

  /api/department/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Department

  /api/department/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Department

    ##Format
  /api/format:
    get:
      summary: Get all formats
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of formats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/formatGet"
      tags:
        - Format

    post:
      summary: Create a format
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Formats creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/formatPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Format

  /api/format/{id}:
    get:
      summary: Get a single format by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single Format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/format"
      tags:
        - Format
    put:
      summary: Update a format by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: Format update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/formatPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Format

    delete:
      summary: Delete a format by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true

      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Format

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the format to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Format

  /api/format/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Format

  /api/format/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Format

    ##Level
  /api/level:
    get:
      summary: Get all levels
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of levels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/levelGet"
      tags:
        - Level
    post:
      summary: Create a level
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Levels creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/levelPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Level

  /api/level/{id}:
    get:
      summary: Get a single level by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single Level
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/levelGet"
      tags:
        - Level
    put:
      summary: Update a level by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: Level update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/levelPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Level

    delete:
      summary: Delete a level by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Level

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the level to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Level

  /api/level/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Level

  /api/level/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Level

  ##Partner
  /api/partner:
    get:
      summary: Get all partners
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of partners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/partners"
      tags:
        - Partner
    post:
      summary: Create a partners
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Partners creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partnersPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Partner

  /api/partner/{id}:
    get:
      summary: Get a single partner by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single partner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/partners"
      tags:
        - Partner
    put:
      summary: Update a partner by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: Partner update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/partnersPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Partner
    delete:
      summary: Delete a partner by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Partner

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the partner to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Partner

  /api/partner/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Partner

  /api/partner/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Partner

  ##Topic
  /api/topic:
    get:
      summary: Get all topics
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of topics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/topics"
      tags:
        - Topic
    post:
      summary: Create a topic
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Topics creation payload (direction and level they are Ids)
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/topicsPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Topic

  /api/topic/{id}:
    get:
      summary: Get a single topic by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single topic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/topics"
      tags:
        - Topic
    put:
      summary: Update a topic by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Topic update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/topicsPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Topic
    delete:
      summary: Delete a topic by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Topic

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the news to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Topic

  /api/topic/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Topic

  /api/topic/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Topic


  ##Theme
  /api/theme:
    get:
      summary: Get all themes
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of themes
          content:
            application/json:
              schema:
      #                        $ref: "#/components/schemas/topics"
      tags:
        - Theme
    post:
      summary: Create a theme
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Themes belongs to topics.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/themePost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Theme

  /api/theme/{id}:
    get:
      summary: Get a single theme by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single theme
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/topics"
      tags:
        - Theme
    put:
      summary: Update a theme by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Theme update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/themePut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Theme
    delete:
      summary: Delete a theme by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Theme

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the news to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Theme

  /api/theme/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Theme

  /api/theme/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Theme

  ##EventsCategory
  /api/eventsCategory:
    get:
      summary: Get all eventsCategory
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of eventsCategories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventsCategory"
      tags:
        - EventsCategory
    post:
      summary: Create a eventsCategory
      security:
        - BearerAuth: [ ]
      requestBody:
        description: eventsCategory creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsCategoryPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - EventsCategory

  /api/eventsCategory/{id}:
    get:
      summary: Get a single eventsCategory by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single eventsCategory
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/eventsCategory"
      tags:
        - EventsCategory
    put:
      summary: EventsCategory a eventsCategory by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: EventsCategory update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsCategoryPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - EventsCategory
    delete:
      summary: Delete a eventsCategory by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - EventsCategory

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the eventsCategory to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - EventsCategory

  /api/eventsCategory/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - EventsCategory

  /api/eventsCategory/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - EventsCategory

  ##Events
  /api/events:
    get:
      summary: Get all events
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of eventsCategories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/events"
      tags:
        - Events
    post:
      summary: Create a events
      security:
        - BearerAuth: [ ]
      requestBody:
        description: event creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Events

  /api/events/{id}:
    get:
      summary: Get a single event by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single event
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/events"
      tags:
        - Events
    put:
      summary: Update  events by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Events update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Events
    delete:
      summary: Delete a events by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Events

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the events to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Events

  /api/events/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                    description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Events

  /api/events/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Events

  ##Employee
  /employee/fetch-employees:
    get:
      summary: Sync all employees from hemis api.
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
      responses:
        "200":
          description: List of faculties
          content:
            application/json:
              schema:
      #                $ref: "#/components/schemas/faculty"
      tags:
        - Employee
  /api/employee:
    get:
      summary: Get all Employees
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of Employees
          content:
            application/json:
              schema:
      #                $ref: "#/components/schemas/specialistsInfo"
      tags:
        - Employee
    post:
      summary: Create a employee
      security:
        - BearerAuth: [ ]
      requestBody:
        description: employee creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeePost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - Employee

  /api/employee/{id}:
    get:
      summary: Get a single employee by id
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single employee
          content:
            application/json:
              schema:
      #                $ref: "#/components/schemas/specialistsInfo"
      tags:
        - Employee
    put:
      summary: Update  employee by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Employee update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeePut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - Employee
    delete:
      summary: Delete a employee by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - Employee

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the employee to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Employee

  /api/employee/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - Employee

  /api/employee/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - Employee

  ##University
  /api/university:
    get:
      summary: Get all university
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of university
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/university"
      tags:
        - University
    post:
      summary: Create a university
      security:
        - BearerAuth: [ ]
      requestBody:
        description: specialistInfo creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/universityPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addModel"
      tags:
        - University

  /api/university/{id}:
    get:
      summary: Get a single university by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single university
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/specialistsInfo"
      tags:
        - University
    put:
      summary: Update  university by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: university update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/universityPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateModel"
      tags:
        - University
    delete:
      summary: Delete a university by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/deleteModel"
      tags:
        - University

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the university to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - University

  /api/university/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/uploadResponse"

      tags:
        - University

  /api/university/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/deleteFile"
      tags:
        - University

  ##Messenger
  /api/messenger:
    get:
      summary: Get all messengers
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of messengers
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Messenger
    post:
      summary: Create a messenger
      security:
        - BearerAuth: [ ]
      requestBody:
        description: messengers creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/messengerPost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/addModel"
      tags:
        - Messenger
  /api/messenger/{id}:
    get:
      summary: Get a single messengers by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single messenger
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Messenger
    put:
      summary: Update  messenger by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: modelId
          schema:
            type: string
          required: true
      requestBody:
        description: messengers update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/messengersPut"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/updateModel"
      tags:
        - Messenger
    delete:
      summary: Delete a messenger by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/deleteModel"
      tags:
        - Messenger

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the messengers to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Messenger
  /api/messenger/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/uploadResponse"

      tags:
        - Messenger
  /api/messenger/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
            # $ref: "#/components/schemas/deleteFile"
      tags:
        - Messenger


  ##Contact
  #  /api/contact:
  #    get:
  #      summary: Get all contacts
  #      security:
  #        - BearerAuth: [ ]
  #      parameters:
  #        - in: query
  #          name: limit
  #          schema:
  #            type: string
  #          required: false
  #        - in: query
  #          name: page
  #          schema:
  #            type: string
  #          required: false
  #        - in: query
  #          name: select
  #          schema:
  #            type: string
  #          required: false
  #        - in: query
  #          name: search
  #          schema:
  #            type: string
  #          required: false
  #      responses:
  #        "200":
  #          description: List of contacts
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/messengers"
  #      tags:
  #        - Contact
  #    post:
  #      summary: Create a contact
  #      security:
  #        - BearerAuth: [ ]
  #      requestBody:
  #        description: Contacts creation payload
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/contactPost"
  #      responses:
  #        "201":
  #          description: Created successfully
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/addModel"
  #      tags:
  #        - Contact
  #  /api/contact/{id}:
  #    get:
  #      summary: Get a single contact by ID
  #      security:
  #        - BearerAuth: [ ]
  #      parameters:
  #        - in: path
  #          name: id
  #          schema:
  #            type: string
  #          required: true
  #      responses:
  #        "200":
  #          description: Single contacts
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/messengers"
  #      tags:
  #        - Contact
  #    put:
  #      summary: Update  contact by ID
  #      security:
  #        - BearerAuth: [ ]
  #      parameters:
  #        - in: path
  #          name: id
  #          schema:
  #            type: string
  #          required: true
  #      requestBody:
  #        description: Contacts update payload
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              $ref: "#/components/schemas/contactPost"
  #      responses:
  #        "200":
  #          description: Updated successfully
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/updateModel"
  #      tags:
  #        - Contact
  #    delete:
  #      summary: Delete a contact by ID
  #      security:
  #        - BearerAuth: [ ]
  #      parameters:
  #        - in: path
  #          name: id
  #          schema:
  #            type: string
  #          required: true
  #      responses:
  #        "200":
  #          description: Deleted successfully
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/deleteModel"
  #      tags:
  #        - Contact
  #
  #    patch:
  #      summary: Updating status
  #      security:
  #        - BearerAuth: [ ]
  #      parameters:
  #        - in: path
  #          name: id
  #          required: true
  #          description: ID of the contact to be updated
  #      requestBody:
  #        description: to update model status
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #              type: object
  #              properties:
  #                status:
  #                  type: number
  #      responses:
  #        "201": # status code
  #          description: Patched model will come
  #          content:
  #            application/json:
  #              schema:
  #                type: object
  #      tags:
  #        - Contact
  #  /api/contact/upload:
  #    post:
  #      summary: Uploading file and getting path
  #      security:
  #        - BearerAuth: [ ]
  #      requestBody:
  #        description: File must be sent
  #        required: true
  #        content:
  #          multipart/form-data:
  #            schema:
  #              type: object
  #              properties:
  #                file:
  #                  type: string
  #                  format: binary
  #                  description: The file to upload.
  #
  #      responses:
  #        "200": # status code
  #          description: File path
  #          content:
  #            application/json:
  #              schema:
  #              # $ref: "#/components/schemas/uploadResponse"
  #      tags:
  #        - Contact
  #  /api/contact/deleteFile:
  #    delete:
  #      summary: Deleting file and getting response
  #      security:
  #        - BearerAuth: [ ]
  #      requestBody:
  #        description: imagePath must be sent
  #        required: true
  #        content:
  #          application/json:
  #            schema:
  #            # $ref: "#/components/schemas/deleteFile"
  #      tags:
  #        - Contact

  ##Licence
  /api/licence:
    get:
      summary: Get all licences
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of licences
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Licence
    post:
      summary: Create a licence
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Licence creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/licencePost"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/addModel"
      tags:
        - Licence
  /api/licence/{id}:
    get:
      summary: Get a single licence by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single licences
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Licence
    put:
      summary: Update  licence by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Licence update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/licencePost"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/updateModel"
      tags:
        - Licence
    delete:
      summary: Delete a licence by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/deleteModel"
      tags:
        - Licence

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the contact to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Licence
  /api/licence/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/uploadResponse"
      tags:
        - Licence
  /api/licence/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
            # $ref: "#/components/schemas/deleteFile"
      tags:
        - Licence

  ##Social
  /api/social:
    get:
      summary: Get all socials
      security:
        - BearerAuth: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: string
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: select
          schema:
            type: string
          required: false
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        "200":
          description: List of contacts
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Social
    post:
      summary: Create a social
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Socials creation payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/socials"
      responses:
        "201":
          description: Created successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/addModel"
      tags:
        - Social
  /api/social/{id}:
    get:
      summary: Get a single social by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Single social
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/messengers"
      tags:
        - Social
    put:
      summary: Update  social by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Socials update payload
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/socials"
      responses:
        "200":
          description: Updated successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/updateModel"
      tags:
        - Social
    delete:
      summary: Delete a social by ID
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Deleted successfully
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/deleteModel"
      tags:
        - Social

    patch:
      summary: Updating status
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the contact to be updated
      requestBody:
        description: to update model status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: number
      responses:
        "201": # status code
          description: Patched model will come
          content:
            application/json:
              schema:
                type: object
      tags:
        - Social
  /api/social/upload:
    post:
      summary: Uploading file and getting path
      security:
        - BearerAuth: [ ]
      requestBody:
        description: File must be sent
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload.

      responses:
        "200": # status code
          description: File path
          content:
            application/json:
              schema:
              # $ref: "#/components/schemas/uploadResponse"
      tags:
        - Social
  /api/social/deleteFile:
    delete:
      summary: Deleting file and getting response
      security:
        - BearerAuth: [ ]
      requestBody:
        description: imagePath must be sent
        required: true
        content:
          application/json:
            schema:
            # $ref: "#/components/schemas/deleteFile"
      tags:
        - Social

#Statistics
  /api/statistics/counts:
    get:
      summary: Statistics
      security:
        - BearerAuth: [ ]
      responses:
        "200":
          description: Statistics
          content:
            application/json:
              schema:
                 type: object

      tags:
        - Statistics

#Components
components:
  securitySchemes:
    BearerAuth: # This is an arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, just for documentation purposes
  schemas:
    updateModel:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string
    deleteModel:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    addModel:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    login:
      type: object
      properties:
        login:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
    loginSuccess:
      properties:
        token:
          type: string
        user:
          type: object
          properties:
            name:
              type: string
            role:
              type: string
            login:
              type: string

    user:
      type: object
      required:
        - name
        - login
        - phone
        - password
        - language
      properties:
        name:
          type: string
          example: John Doe
        login:
          type: string
          example: johndoe
        role:
          type: string
          example: manager
        password:
          type: string
          example: "strongPassword123"
        img:
          type: array
          items:
            type: string
            example: "/uploads/image1.jpg"
      SuccessResponse:
        type: object
        properties:
          ok:
            type: boolean
            example: true
          message:
            type: string
            example: User created successfully.
      ErrorResponse:
        type: object
        properties:
          ok:
            type: boolean
            example: false
          message:
            type: string
            example: "Invalid data or user already exists"
    addUserResponse:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    updateUserResponse:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    deleteUserResponse:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    #Apllicants
    applicants:
      type: object
      required:
        - slug
        - name
        - phone
        - email
      properties:
        slug:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string

    ## Language
    language:
      type: object
      properties:
        title:
          type: string
        img:
          type: string
        slug:
          type: string
    languageGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              title:
                type: string
              slug:
                type: string
              isDefault:
                type: boolean
              img:
                type: array
              status:
                type: number

    languageUp:
      type: object
      properties:
        title:
          type: string
        isDefault:
          type: boolean
        img:
          type: array
        _id:
          type: string
        slug:
          type: string

    ## Category
    category:
      type: object
      properties:
        modelId?:
          type: string | null
        img:
          type: array
        slug:
          type: string
        status:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text?:
              type: string
            language:
              type: string

    categoriesGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              img:
                type: array
              slug:
                type: string
              status:
                type: string
              translates:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    text?:
                      type: string
                    language:
                      type: string

    categoryUp:
      type: object
      properties:
        img:
          type: array
        slug:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text?:
              type: string
            language:
              type: string

    categorytransAdd:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        text?:
          type: string
        language:
          type: string
    ## News
    news:
      type: object
      properties:
        img:
          type: array
        slug:
          type: string
        category:
          type: string
        modelId?:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            description:
              type: string
            language:
              type: string

    newsGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              img:
                type: array
              slug:
                type: string
              category:
                type: string
              _id:
                type: string
              translates:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    text:
                      type: string
                    description:
                      type: string
                    language:
                      type: string
    newsUp:
      type: object
      properties:
        _id:
          type: string
        img:
          type: array
        slug:
          type: string
        category:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            description:
              type: string
            language:
              type: string
    ## Page
    page:
      type: object
      properties:
        img:
          type: array
        slug:
          type: string

        translate:
          type: object
          properties:
            title:
              type: string
            text?:
              type: string
            description:
              type: string
            language:
              type: string
    pageUp:
      type: object
      properties:
        _id:
          type: string
        img:
          type: array
        slug:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            description:
              type: string
            language:
              type: string

    ## Degrees
    degree:
      type: object
      properties:
        modelId?:
          type: string | null
        slug:
          type: string
        status?:
          type: Number
        translate:
          type: object
          properties:
            name:
              type: string
            language:
              type: string
    degreeGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string
              status:
                type: Number
              translate:
                type: object
                properties:
                  name:
                    type: string
                  text?:
                    type: string
                  language:
                    type: string

    degreePut:
      type: object
      properties:
        slug:
          type: string
        status:
          type: Number
        translate:
          type: object
          properties:
            name:
              type: string
            language:
              type: string

    ## Specialties
    specialty:
      type: object
      properties:
        modelId?:
          type: string | null
        code:
          type: number
        views?:
          type: number
        image:
          type: file
        faculty:
          type: string
        degree:
          type: string
        format:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            price:
              type: string
            duration:
              type: string
            language:
              type: string

    specialtyPost:
      type: object
      properties:
        modelId:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            language:
              type: string

    specialtyPut:
      type: object
      properties:
        prices:
          type: array
          items:
            type: object
            properties:
              price:
                type: integer
                example: 10000
              format:
                type: string
                example: "675fbdf0f95bd5f2820f27c6"
              degree:
                type: string
                example: "67629e38ca926b3989082423"
        duration:
          type: array
          items:
            type: object
            properties:
              format:
                type: string
                example: "675fbdf0f95bd5f2820f27c6"
              year:
                type: integer
                example: 4
        img:
          type: string
          example: "uploads/specialty/1734947793513-615959758_photo_2024-12-23_12-25-03.jpg"
        slug:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
              example: "Telecommunications Engineering (Information Transmission Systems)"
            description:
              type: string
              example: "specialty"
            language:
              type: string
              example: "674eb6cd002ef5fcf663c897"

      required:
        - prices
        - duration
        - translate

    directionAll:
      type: object
      properties:
        _id?:
          type: string | null
        code:
          type: number
        views?:
          type: number
        img:
          type: array
        faculty:
          type: object
          properties:
            _id:
              type: string
            translates:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        degree:
          type: object
          properties:
            _id:
              type: string
            translates:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        format:
          type: object
          properties:
            _id:
              type: string
              translates:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            price:
              type: string
            duration:
              type: string
            language:
              type: string
    department:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              img:
                type: array
              status:
                type: number
              translate:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                  language:
                    type: string
    departmentPost:
      type: object
      properties:
        modelId:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            language:
              type: string

    departmentPut:
      type: object
      properties:
        img:
          type: array
        slug:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            language:
              type: string

    formatGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              translates:
                type: array
                items: object
                properties:
                  name:
                    type: string
                  language:
                    type: string

    formatPost:
      type: object
      properties:
        modelId?:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            language:
              type: string
    formatPut:
      type: object
      properties:
        translate:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              language:
                type: string

    format:
      items:
        type: object
      properties:
        _id:
          type: string
        slug:
          type: string
        status:
          type: number
          translates:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                text?:
                  type: string
                language:
                  type: string

    levelGet:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string
              status:
                type: number
              translates:
                type: array
                items:
                  type: object
                  properties:
                    course:
                      type: number
                    text?:
                      type: string
                    language:
                      type: string

    levelPost:
      type: object
      properties:
        modelId?:
          type: string
        slug:
          type: string
        status:
          type: number
        translate:
          type: object
          properties:
            course:
              type: number
            language:
              type: string

    levelPut:
      type: object
      slug:
        type: string
      status:
        type: number
      properties:
        translate:
          items:
            type: object
            properties:
              course:
                type: number
              text?:
                type: string
              language:
                type: string

    partners:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string

              img:
                type: array
              status:
                type: number
              translates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    language:
                      type: string

    partnersPost:
      type: object
      properties:
        modelId?:
          type: string
        img:
          type: array
        slug:
          type: string
        status:
          type: number
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            language:
              type: string

    partnersPut:
      type: object
      properties:
        img:
          type: array
        slug:
          type: string
        status:
          type: number
        translate:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              language:
                type: string

    topics:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              specialty:
                type: string
              level:
                type: string
              translates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    language:
                      type: string
    topicsPost:
      type: object
      properties:
        modelId?:
          type: string
        specialty:
          type: string
        level:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            language:
              type: string

    topicsPut:
      type: object
      properties:
        specialty:
          type: string
        level:
          type: string
        translate:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              language:
                type: string
    themePost:
      type: object
      properties:
        modelId:
          type: string
          description: It is optional
        topic:
          type: string
        slug:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            description:
              type: string
            language:
              type: string
    themePut:
      type: object
      properties:
        topic:
          type: string
        slug:
          type: string
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            description:
              type: string
            language:
              type: string
    eventsCategory:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string
              status?:
                type: number
              translates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    text?:
                      type: string
                    language:
                      type: string

    eventsCategoryPost:
      type: object
      properties:
        modelId?:
          type: string
        slug:
          type: string
        status?:
          type: number
        translate:
          type: object
          properties:
            name:
              type: string
            text?:
              type: string
            language:
              type: string

    eventsCategoryPut:
      type: object
      properties:
        slug:
          type: string
        status?:
          type: number
        translate:
          items:
            type: object
            properties:
              name:
                type: string
              language:
                type: string

    events:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string
              status?:
                type: number
              eventsCategory:
                type: array
                items: object
                properties:
                  eventCategory: string
              time:
                type: Date
              img:
                type: array
              translates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    language:
                      type: string
    eventsPost:
      type: object
      properties:
        modelId?:
          type: string
        from:
          type: string
        to:
          type: string
        img: [ ]
        slug:
          type: string
        status:
          type: number
        eventsCategory:
          type: array
          properties:
            id:
              type: array
              items:
                type: string
              example:
                - "3234243234"
                - "234242342"
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            text?:
              type: string
            address:
              type: string
            language:
              type: string

    eventsPut:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        img: [ ]
        slug:
          type: string
        status:
          type: number
        eventsCategory:
          type: array
          properties:
            id:
              type: array
              items:
                type: string
              example:
                - "3234243234"
                - "234242342"
        translate:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            text?:
              type: string
            address:
              type: string
            language:
              type: string

    specialistsInfo:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              user:
                type: string
              files:
                type: file
              articles:
                type: string
              img:
                type: array
              translates:
                type: array
                items:
                  type: object
                  properties:
                    completed_university:
                      type: string
                    study_duration:
                      type: string
                    description:
                      type: string
                    language:
                      type: string

    employeePost:
      type: object
      properties:
        modelId:
          type: string
        hemisId:
          type: string
        department:
          type: string
        slug:
          type: string
        img:
          type: array
        employeeId:
          type: number
        socialLinks:
          type: array
          items: object
          properties:
            messenger:
              type: string
            link:
              type: string
        birthDate:
          type: Date
        translate:
          type: array
          items:
            type: object
            properties:
              firstName:
                type: string
              secondName:
                type: string
              thirdName:
                type: string
              receptionTime:
                type: string
              text:
                type: string
              gender:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              academicRank:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              staffPosition:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              employeeType:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              employeeStatus:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              language:
                type: string


    employeePut:
      type: object
      properties:
        hemisId:
          type: string
        department:
          type: string
        slug:
          type: string
        img:
          type: array
        employeeId:
          type: number
        socialLinks:
          type: array
          items:
            type: object
            properties:
              messenger:
                type: string
              link:
                type: string
        birthDate:
          type: Date
        translate:
          type: array
          items:
            type: object
            properties:
              firstName:
                type: string
              secondName:
                type: string
              thirdName:
                type: string
              gender:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              academicRank:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              staffPosition:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              employeeType:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              employeeStatus:
                type: object
                properties:
                  name:
                    type: string
                  code:
                    type: string
              language:
                type: string
              employee:
                type: string

    university:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              img:
                type: array
              translates:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    language:
                      type: string

    universityPost:
      type: object
      properties:
        modelId?:
          type: string
        img:
          type: array
        translate:
          type: object
          properties:
            description:
              type: string
            language:
              type: string

    universityPut:
      type: object
      properties:
        img:
          type: array
        translate:
          items:
            type: object
            properties:
              description:
                type: string
              language:
                type: string

    uploadFile:
      properties:
        file:
          type: file

    uploadResponse:
      properties:
        files:
          type: string

    deleteFile:
      properties:
        filePath:
          type: string

    deletingFileResponse:
      type: object
      properties:
        ok:
          type: boolean
        message:
          type: string

    messengerPost:
      type: object
      properties:
        modelId:
          type: string
        slug:
          type: string
        img:
          type: string
        translate:
          type: object
          properties:
            name:
              type: string
            text:
              type: string
            language:
              type: string
          required:
            - name
            - language
      required: [ ]
    contactPost:
      type: object
      properties:
        email:
          type: string
        phone:
          type: string
        location:
          type: array
          items:
            type: object
            properties:
              lang:
                type: string
              lat:
                type: string
        address:
          type: array
          items: string
        slug:
          type: string
        img:
          type: array
      required: [ ]
    licencePost:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        file:
          type: array
          items: string
        slug:
          type: string
      required: [ ]

    socials:
      type: object
      properties:
        messenger:
          type: string
          description: It is optional
        link:
          type: string
        slug:
          type: string
        status:
          type: number
        translate:
          type: object
          properties:
            title:
              type: string
            text:
              type: string
            language:
              type: string
      required: [ ]
